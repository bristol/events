{
    "cancelled": false,
    "description": "<p>Programming languages would ideally stop us from making mistakes. The biggest mistakes lead to injection vulnerabilities, where safe strings (defined by the programmer), are mixed with unsafe values (e.g. from the user).</p> <p>The is_literal() check is an ongoing project by Craig Francis and Dan Ackroyd, building on Google\u2019s Christoph Kern\u2019s work, as a way to check if a variable (e.g. an SQL string) is safe, to make sure there are no mistakes.</p> <p>We will start the evening with a quick talk about the idea, and the justification for why this check needs to exist - also available at:</p> <p><a href=\"https://github.com/craigfrancis/php-is-literal-rfc/blob/main/justification.md\" class=\"linkified\">https://github.com/craigfrancis/php-is-literal-rfc/blob/main/justification.md</a></p> <p>Then we will discuss any issues you can find, as well as our plan on how to get this proposal added to the PHP language:</p> <p><a href=\"https://wiki.php.net/rfc/is_literal\" class=\"linkified\">https://wiki.php.net/rfc/is_literal</a></p> <p>Join Zoom Meeting<br/><a href=\"https://zoom.us/j/93248737850?pwd=ZkN4ZnhnR0pISkhoNlMreWcwV0t0Zz09\" class=\"linkified\">https://zoom.us/j/93248737850?pwd=ZkN4ZnhnR0pISkhoNlMreWcwV0t0Zz09</a></p> <p>Meeting ID:[masked]<br/>Passcode:[masked]<br/>One tap mobile<br/>[masked],,[masked]# United Kingdom<br/>[masked],,[masked]# United Kingdom</p> <p>Dial by your location<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>[masked] United Kingdom<br/>Meeting ID:[masked]<br/>Find your local number: <a href=\"https://zoom.us/u/acGnAxw02x\" class=\"linkified\">https://zoom.us/u/acGnAxw02x</a></p> ",
    "end_time": 1616097600,
    "link": "https://www.meetup.com/OWASP-Bristol/events/276564621/",
    "location": null,
    "org": "OWASP-Bristol",
    "start_time": 1616090400,
    "title": "Virtual Discussion: Stopping injection vulnerabilities with is_literal()"
}