{
    "cancelled": false,
    "description": "<p>Hi Everybody !</p> <p>Thank you to all those who attended the previous ACCU Bristol and Bath meetup. It was an excellent evening and thoroughly enjoyable - thanks.</p> <p>Robin Williams has very kindly offered to give a re-run of his excellent talk - 'Refreshing Vintage Hoc!' (see abstract below).</p> <p>Please note that this event (as with its predecessor) will be held at the [Blu Wireless Bristol Office](<a href=\"https://www.bluwireless.com/contact-us/\" class=\"linkified\">https://www.bluwireless.com/contact-us/</a>) and not at the Marriott (though the Blu Wireless Office is literally next to the hotel). The address is as follows:</p> <p>Blu Wireless<br/>4th Floor<br/>One Castlepark<br/>Tower Hill<br/>Bristol<br/>BS2 0JA</p> <p>The lightning talks will be followed by a trip to the Cornubia where the discussion will continue :-) !</p> <p>Thanks and hope to see you there !</p> <p>Jim</p> <p>***Refreshing Vintage Hoc***</p> <p>In their classic 1984 book, Kernighan &amp; Pike describe the development of '[hoc](<a href=\"https://en.wikipedia.org/wiki/Hoc_(programming_language\" class=\"linkified\">https://en.wikipedia.org/wiki/Hoc_(programming_language</a>))'. Over the course of a chapter, hoc grows from a four-function calculator into a fairly complete scripting language, with variables, control logic and procedures. This pattern can be applied to use cases ranging from flexible control file input to compiler front-ends.</p> <p>In this talk, we will revisit the development of hoc from the perspective of 2022. While Kernighan &amp; Pike's emphasis on the value of incremental development remains valid, other aspects of the presentation have not aged as well. Their book pre-dates Test Driven Development, with large increments by modern standards (including a ground-up re-write) and free use of global variables. By now, the STL provides the required data structures and safe memory management.</p> <p>We'll start by applying TDD to the initial development of the four-function calculator, and review the code which results. I'll then describe one onward route, circumventing the K&amp;P's rewrite and applying Parsing Expression Grammars to allow for fully dynamic flexibility in the language represented.</p> ",
    "end_time": 1669323600,
    "link": "https://www.meetup.com/accu-bristol/events/289749908/",
    "location": {
        "address": null,
        "city": "Bristol",
        "country": "gb",
        "latitude": 51.45517349243164,
        "longitude": -2.5847320556640625,
        "name": "BS2 0JA"
    },
    "org": "accu",
    "start_time": 1669316400,
    "title": "Refreshing Vintage Hoc!"
}